{"ast":null,"code":"var _jsxFileName = \"D:\\\\dataviz\\\\d3-pie-chart\\\\expense-tracker\\\\src\\\\Graph.js\";\nimport * as d3 from 'd3';\nimport { db } from './firebase';\nimport { collection, getDocs, query, orderBy, limit } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dims = {\n  height: 300,\n  width: 300,\n  radius: 150\n};\nconst cent = {\n  x: dims.width / 2 + 5,\n  y: dims.height / 2 + 5\n};\nconst svgWidth = dims.width + 150;\nconst svgHeight = dims.height + 150;\n\nfunction Graph() {\n  //define pie from d3 \n  const pie = d3.pie().sort(null).value(d => d.cost); //this creates start and end angle within 2pi range\n\n  const angles = pie([{\n    name: 'rent',\n    cost: 500\n  }, {\n    name: 'bills',\n    cost: 300\n  }, {\n    name: 'gaming',\n    cost: 200\n  }]); //this creates a path for each angle(eg : arcPath(angles[0])= M9.184850993605149e-15...)\n\n  const arcPath = d3.arc().outerRadius(dims.radius).innerRadius(dims.radius / 2); // update function\n\n  const update = data => {\n    console.log(data);\n  }; // data array and firestore\n\n\n  var data = [];\n\n  async function menuList() {\n    const menuCol = collection(db, 'expenseTracker');\n    const snapshot = await getDocs(menuCol); //console.log(snapshot.orderBy('cost'));\n\n    const resultData = snapshot.docs.map(doc => doc.data());\n  }\n\n  const citiesRef = collection(db, \"expenseTracker\");\n  const q = query(citiesRef, orderBy(\"cost\"));\n  console.log(q);\n  q(res => {\n    res.docChanges().forEach(change => {\n      const doc = { ...change.doc.data(),\n        id: change.doc.id\n      };\n\n      switch (change.type) {\n        case 'added':\n          data.push(doc);\n          break;\n\n        case 'modified':\n          const index = data.findIndex(item => item.id == doc.id);\n          data[index] = doc;\n          break;\n\n        case 'removed':\n          data = data.filter(item => item.id !== doc.id);\n          break;\n\n        default:\n          break;\n      }\n    }); // call the update function\n\n    update(data);\n  }); // menuList()\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: `translate(${cent.x}, ${cent.y})`,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: svgWidth,\n        height: svgHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["D:/dataviz/d3-pie-chart/expense-tracker/src/Graph.js"],"names":["d3","db","collection","getDocs","query","orderBy","limit","dims","height","width","radius","cent","x","y","svgWidth","svgHeight","Graph","pie","sort","value","d","cost","angles","name","arcPath","arc","outerRadius","innerRadius","update","data","console","log","menuList","menuCol","snapshot","resultData","docs","map","doc","citiesRef","q","res","docChanges","forEach","change","id","type","push","index","findIndex","item","filter"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\r\nimport { db } from './firebase';\r\nimport { collection,getDocs,query, orderBy, limit } from \"firebase/firestore\"; \r\n\r\nconst dims = { height: 300, width: 300, radius: 150 };\r\nconst cent = { x: (dims.width / 2 + 5), \r\n               y: (dims.height / 2 + 5)};\r\nconst svgWidth = dims.width + 150;\r\nconst svgHeight = dims.height + 150;\r\n\r\nfunction Graph () {\r\n       //define pie from d3 \r\n        const pie = d3.pie()\r\n                      .sort(null)\r\n                      .value(d => d.cost);\r\n        //this creates start and end angle within 2pi range\r\n        const angles = pie([\r\n            { name: 'rent', cost: 500 },\r\n            { name: 'bills', cost: 300 },\r\n            { name: 'gaming', cost: 200 }\r\n        ])\r\n        //this creates a path for each angle(eg : arcPath(angles[0])= M9.184850993605149e-15...)\r\n        const arcPath = d3.arc()\r\n                          .outerRadius(dims.radius)\r\n                          .innerRadius(dims.radius / 2);\r\n        // update function\r\n        const update = (data) => {\r\n           console.log(data);\r\n        };\r\n    // data array and firestore\r\n    var data = [];  \r\n         async function menuList() {\r\n                            const menuCol = collection(db, 'expenseTracker');\r\n                            const snapshot = await getDocs(menuCol);\r\n                            //console.log(snapshot.orderBy('cost'));\r\n                            const resultData = snapshot.docs.map(doc => doc.data());\r\n                                          \r\n        \r\n         }\r\n         const citiesRef = collection(db, \"expenseTracker\");\r\n         const q = query(citiesRef, orderBy(\"cost\"));\r\n         console.log(q)\r\n         q(res => {\r\n\r\n            res.docChanges().forEach(change => {\r\n          \r\n              const doc = {...change.doc.data(), id: change.doc.id};\r\n          \r\n              switch (change.type) {\r\n                case 'added':\r\n                  data.push(doc);\r\n                  break;\r\n                case 'modified':\r\n                  const index = data.findIndex(item => item.id == doc.id);\r\n                  data[index] = doc;\r\n                  break;\r\n                case 'removed':\r\n                  data = data.filter(item => item.id !== doc.id);\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n          \r\n            });\r\n          \r\n            // call the update function\r\n            update(data);\r\n          \r\n          });\r\n       // menuList()\r\n        return(\r\n        <>\r\n        <g transform={`translate(${cent.x}, ${cent.y})`}>\r\n        <svg width={svgWidth} height={svgHeight}>\r\n\r\n\r\n        </svg>\r\n        </g>\r\n        </>\r\n        );\r\n  }\r\n\r\n  export default Graph;"]},"metadata":{},"sourceType":"module"}