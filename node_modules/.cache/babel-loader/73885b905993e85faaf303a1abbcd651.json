{"ast":null,"code":"import * as d3 from 'd3';\nimport { db } from './firebase';\nimport { collection, getDocs, query, orderBy, onSnapshot, docChanges } from \"firebase/firestore\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dims = {\n  height: 300,\n  width: 300,\n  radius: 150\n};\nconst cent = {\n  x: dims.width / 2 + 5,\n  y: dims.height / 2 + 5\n};\nconst svgWidth = dims.width + 150;\nconst svgHeight = dims.height + 150;\n\nfunction Graph() {\n  const svg = d3.select('.canvas').append('svg').attr('width', dims.width + 150).attr('height', dims.height + 150);\n  const graph = svg.append('g').attr(\"transform\", `translate(${cent.x}, ${cent.y})`); //define pie from d3 \n\n  const pie = d3.pie().sort(null).value(d => d.cost); //this creates start and end angle within 2pi range\n\n  const angles = pie([{\n    name: 'rent',\n    cost: 500\n  }, {\n    name: 'bills',\n    cost: 300\n  }, {\n    name: 'gaming',\n    cost: 200\n  }]); //this creates a path for each angle(eg : arcPath(angles[0])= M9.184850993605149e-15...)\n\n  const arcPath = d3.arc().outerRadius(dims.radius).innerRadius(dims.radius / 2); // update function\n\n  const update = data => {\n    const paths = graph.selectAll('path').data(pie(data)); // console.log(paths);\n\n    paths.enter().attr('class', 'arc').data('d', arcPath).attr('stroke', 'white').attr('stroke-width', 3);\n  }; // data array and firestore\n\n\n  var data = [];\n  const citiesRef = collection(db, \"expenseTracker\");\n  const q = query(citiesRef, orderBy(\"cost\")); // const querySnapshot = getDocs(q);\n  //console.log(querySnapshot.onSnapshot)\n\n  const unsubscribe = onSnapshot(q, querySnapshot => {\n    const changes = querySnapshot.docChanges();\n    changes.forEach(change => {\n      const doc = { ...change.doc.data(),\n        id: change.doc.id\n      }; // console.log(\"change type: \" +change.type+ \"  change id: \" + change.doc.id)\n\n      switch (change.type) {\n        case 'added':\n          data.push(doc);\n          break;\n\n        case 'modified':\n          const index = data.findIndex(item => item.id == doc.id);\n          data[index] = doc;\n          break;\n\n        case 'removed':\n          data = data.filter(item => item.id !== change.doc.id);\n          break;\n\n        default:\n          break;\n      }\n    });\n    update(data);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["D:/dataviz/d3-pie-chart/expense-tracker/src/Graph.js"],"names":["d3","db","collection","getDocs","query","orderBy","onSnapshot","docChanges","dims","height","width","radius","cent","x","y","svgWidth","svgHeight","Graph","svg","select","append","attr","graph","pie","sort","value","d","cost","angles","name","arcPath","arc","outerRadius","innerRadius","update","data","paths","selectAll","enter","citiesRef","q","unsubscribe","querySnapshot","changes","forEach","change","doc","id","type","push","index","findIndex","item","filter"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\r\nimport { db } from './firebase';\r\nimport { collection,getDocs,query, orderBy, onSnapshot,docChanges } from \"firebase/firestore\"; \r\n\r\nconst dims = { height: 300, width: 300, radius: 150 };\r\nconst cent = { x: (dims.width / 2 + 5), \r\n               y: (dims.height / 2 + 5)};\r\nconst svgWidth = dims.width + 150;\r\nconst svgHeight = dims.height + 150;\r\n\r\nfunction Graph () {\r\n    const svg = d3.select('.canvas')\r\n  .append('svg')\r\n  .attr('width', dims.width + 150)\r\n  .attr('height', dims.height + 150);\r\n  const graph = svg.append('g')\r\n  .attr(\"transform\", `translate(${cent.x}, ${cent.y})`);\r\n       //define pie from d3 \r\n        const pie = d3.pie()\r\n                      .sort(null)\r\n                      .value(d => d.cost);\r\n        //this creates start and end angle within 2pi range\r\n        const angles = pie([\r\n            { name: 'rent', cost: 500 },\r\n            { name: 'bills', cost: 300 },\r\n            { name: 'gaming', cost: 200 }\r\n        ])\r\n        //this creates a path for each angle(eg : arcPath(angles[0])= M9.184850993605149e-15...)\r\n        const arcPath = d3.arc()\r\n                          .outerRadius(dims.radius)\r\n                          .innerRadius(dims.radius / 2);\r\n        // update function\r\n        \r\n        const update = (data) => {\r\n            const paths = graph.selectAll('path')\r\n                            .data(pie(data));\r\n              // console.log(paths);\r\n            paths.enter()\r\n                 .attr('class', 'arc')\r\n                 .data('d', arcPath)\r\n                 .attr('stroke', 'white')\r\n                 .attr('stroke-width', 3);\r\n        };\r\n    // data array and firestore\r\n    var data = [];  \r\n         \r\n         const citiesRef = collection(db, \"expenseTracker\");\r\n         const q = query(citiesRef, orderBy(\"cost\"));\r\n        // const querySnapshot = getDocs(q);\r\n         //console.log(querySnapshot.onSnapshot)\r\n         const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n          \r\n            const changes = querySnapshot.docChanges();\r\n\r\n            changes.forEach((change) => {\r\n                const doc = {...change.doc.data(), id: change.doc.id};\r\n               // console.log(\"change type: \" +change.type+ \"  change id: \" + change.doc.id)\r\n            \r\n             switch (change.type) {\r\n                case 'added':\r\n                    data.push(doc);\r\n                    break;\r\n                case 'modified':\r\n                    const index = data.findIndex(item => item.id == doc.id);\r\n                    data[index] = doc;\r\n                    break;\r\n                case 'removed':\r\n                    data = data.filter(item => item.id !== change.doc.id);\r\n                    break;\r\n                default:\r\n                    break;\r\n             } \r\n            });\r\n            update(data);\r\n          });\r\n    \r\n        return(\r\n        <>\r\n        \r\n        </>\r\n        );\r\n  }\r\n\r\n  export default Graph;"]},"metadata":{},"sourceType":"module"}