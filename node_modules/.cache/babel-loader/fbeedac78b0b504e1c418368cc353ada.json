{"ast":null,"code":"import * as d3 from 'd3';\nimport { db } from './firebase';\nimport { collection, getDocs, query, orderBy, onSnapshot, docChanges } from \"firebase/firestore\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dims = {\n  height: 300,\n  width: 300,\n  radius: 150\n};\nconst cent = {\n  x: dims.width / 2 + 5,\n  y: dims.height / 2 + 5\n};\nconst svg = d3.select('.canvas').append('svg').attr('width', dims.width + 150).attr('height', dims.height + 150);\nconst graph = svg.append('g').attr(\"transform\", `translate(${cent.x}, ${cent.y})`);\nconst pie = d3.pie().sort(null).value(d => d.cost); // the value we are evaluating to create the pie angles\n\nconst arcPath = d3.arc().outerRadius(dims.radius).innerRadius(dims.radius / 2); // update function\n\nconst update = data => {\n  // join enhanced (pie) data to path elements\n  const paths = graph.selectAll('path').data(pie(data));\n  console.log(paths);\n  paths.enter().append('path').attr('class', 'arc').attr('d', arcPath).attr('stroke', '#fff').attr('stroke-width', 3);\n};\n\nfunction Graph() {\n  var data = [];\n  const citiesRef = collection(db, \"expenseTracker\");\n  const q = query(citiesRef, orderBy(\"cost\")); // const querySnapshot = getDocs(q);\n  //console.log(querySnapshot.onSnapshot)\n\n  const unsubscribe = onSnapshot(q, querySnapshot => {\n    const changes = querySnapshot.docChanges();\n    changes.forEach(change => {\n      const doc = { ...change.doc.data(),\n        id: change.doc.id\n      }; // console.log(\"change type: \" +change.type+ \"  change id: \" + change.doc.id)\n\n      switch (change.type) {\n        case 'added':\n          data.push(doc);\n          break;\n\n        case 'modified':\n          const index = data.findIndex(item => item.id == doc.id);\n          data[index] = doc;\n          break;\n\n        case 'removed':\n          data = data.filter(item => item.id !== change.doc.id);\n          break;\n\n        default:\n          break;\n      }\n    });\n    update(data);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["D:/dataviz/d3-pie-chart/expense-tracker/src/Graph.js"],"names":["d3","db","collection","getDocs","query","orderBy","onSnapshot","docChanges","dims","height","width","radius","cent","x","y","svg","select","append","attr","graph","pie","sort","value","d","cost","arcPath","arc","outerRadius","innerRadius","update","data","paths","selectAll","console","log","enter","Graph","citiesRef","q","unsubscribe","querySnapshot","changes","forEach","change","doc","id","type","push","index","findIndex","item","filter"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\r\nimport { db } from './firebase';\r\nimport { collection,getDocs,query, orderBy, onSnapshot,docChanges } from \"firebase/firestore\"; \r\n\r\nconst dims = { height: 300, width: 300, radius: 150 };\r\nconst cent = { x: (dims.width / 2 + 5), y: (dims.height / 2 + 5)};\r\nconst svg = d3.select('.canvas')\r\n  .append('svg')\r\n  .attr('width', dims.width + 150)\r\n  .attr('height', dims.height + 150);\r\n  \r\n  const graph = svg.append('g')\r\n  .attr(\"transform\", `translate(${cent.x}, ${cent.y})`);\r\n  const pie = d3.pie()\r\n  .sort(null)\r\n  .value(d => d.cost);\r\n  // the value we are evaluating to create the pie angles\r\n\r\nconst arcPath = d3.arc()\r\n  .outerRadius(dims.radius)\r\n  .innerRadius(dims.radius / 2);\r\n\r\n// update function\r\nconst update = (data) => {\r\n  \r\n  // join enhanced (pie) data to path elements\r\n  const paths = graph.selectAll('path')\r\n    .data(pie(data));\r\n\r\n  console.log(paths);\r\n\r\n  paths.enter()\r\n    .append('path')\r\n      .attr('class', 'arc')\r\n      .attr('d', arcPath)\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 3);\r\n\r\n};\r\n\r\nfunction Graph () {\r\n   \r\n  \r\n      \r\n    var data = [];  \r\n         \r\n         const citiesRef = collection(db, \"expenseTracker\");\r\n         const q = query(citiesRef, orderBy(\"cost\"));\r\n        // const querySnapshot = getDocs(q);\r\n         //console.log(querySnapshot.onSnapshot)\r\n         const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n          \r\n            const changes = querySnapshot.docChanges();\r\n\r\n            changes.forEach((change) => {\r\n                const doc = {...change.doc.data(), id: change.doc.id};\r\n               // console.log(\"change type: \" +change.type+ \"  change id: \" + change.doc.id)\r\n            \r\n             switch (change.type) {\r\n                case 'added':\r\n                    data.push(doc);\r\n                    break;\r\n                case 'modified':\r\n                    const index = data.findIndex(item => item.id == doc.id);\r\n                    data[index] = doc;\r\n                    break;\r\n                case 'removed':\r\n                    data = data.filter(item => item.id !== change.doc.id);\r\n                    break;\r\n                default:\r\n                    break;\r\n             } \r\n            });\r\n            update(data);\r\n          });\r\n    \r\n        return(\r\n        <>\r\n        \r\n        </>\r\n        );\r\n  }\r\n\r\n  export default Graph;"]},"metadata":{},"sourceType":"module"}